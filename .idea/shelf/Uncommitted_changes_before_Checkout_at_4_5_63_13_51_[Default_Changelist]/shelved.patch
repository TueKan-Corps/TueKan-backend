Index: controller/account.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller\n\nimport (\n\t\"TueKan-backend/model\"\n\t\"TueKan-backend/thirdparty\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo\"\n)\n\n// AccountController a controller of an account model\ntype AccountController struct {\n\tDB *sql.DB\n}\n\n// NewAccountController create a new account controller\nfunc NewAccountController(db *sql.DB) *AccountController {\n\treturn &AccountController{DB: db}\n}\n\n// Create add new account\nfunc (a *AccountController) Create(c echo.Context) error {\n\taccount := new(model.Account)\n\n\tif err := c.Bind(account); err != nil {\n\t\treturn err\n\t}\n\n\t// hash password\n\tif err := account.HashAndSaltPassword(); err != nil {\n\t\treturn err\n\t}\n\n\tcoinAmount, err := strconv.Atoi(c.FormValue(\"coin_amount\"))\n\tif err != nil {\n\t\treturn err\n\t}\n\taccount.CoinAmount = coinAmount\n\n\taccount.FirstName = c.FormValue(\"first_name\")\n\taccount.LastName = c.FormValue(\"last_name\")\n\n\taccount.Contact = getContactFromContext(c)\n\n\t// insert general info\n\tqueryString := `INSERT INTO account (username,password,coin_amount,first_name,last_name,contact) \n\t\t\t\t\tVALUES ($1,$2,$3,$4,$5,\n\t\t\t\t\tARRAY[$6,$7,$8,$9,$10]) RETURNING id`\n\terr = a.DB.QueryRow(queryString,\n\t\taccount.Username,\n\t\taccount.Password,\n\t\taccount.CoinAmount,\n\t\taccount.FirstName,\n\t\taccount.LastName,\n\t\taccount.Contact[0].Link,\n\t\taccount.Contact[1].Link,\n\t\taccount.Contact[2].Link,\n\t\taccount.Contact[3].Link,\n\t\taccount.Contact[4].Link).Scan(&account.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusCreated, account.ID)\n}\n\n// GetAll get all account\nfunc (a *AccountController) GetAll(c echo.Context) error {\n\n\tqueryString := \"SELECT id,username,password,coin_amount,first_name,last_name,description FROM account ORDER BY id\"\n\n\trows, err := a.DB.Query(queryString)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\taccounts := make([]*model.Account, 0)\n\tfor rows.Next() {\n\t\taccount := new(model.Account)\n\n\t\terr := rows.Scan(&account.ID,\n\t\t\t&account.Username,\n\t\t\t&account.Password,\n\t\t\t&account.CoinAmount,\n\t\t\t&account.FirstName,\n\t\t\t&account.LastName,\n\t\t\t&account.Description)\n\n\t\taccount.Contact, err = getContactFromDB(a.DB, account.ID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\taccounts = append(accounts, account)\n\t}\n\n\treturn c.JSON(http.StatusOK, accounts)\n}\n\n// UploadProfileIMG upload a profile image\nfunc (a *AccountController) UploadProfileIMG(c echo.Context) error {\n\n\taccountID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// receive file from user\n\tfile, err := c.FormFile(\"profile_img\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsrc, err := file.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer src.Close()\n\n\tfilename := fmt.Sprintf(\"%d.jpg\", accountID)\n\n\t// Destination\n\timgPath := \"./img/\" + filename\n\tdst, err := os.Create(imgPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dst.Close()\n\n\t// Copy\n\tif _, err = io.Copy(dst, src); err != nil {\n\t\treturn err\n\t}\n\n\terr = thirdparty.UploadItem(filename)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusNotAcceptable, \"couldn't upload\")\n\t}\n\n\treturn c.JSON(http.StatusOK, \"Profile image uploaded\")\n}\n\nfunc (a *AccountController) GetProfileIMGList(c echo.Context) error {\n\tfileItems, err := thirdparty.ListItems()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusOK, fileItems)\n}\n\n// GetProfileIMG get account profile image\nfunc (a *AccountController) GetProfileIMG(c echo.Context) error {\n\taccountID := c.Param(\"id\")\n\n\tfilename := accountID + \".jpg\"\n\n\terr := thirdparty.DownloadItem(filename)\n\tif err != nil {\n\t\tc.JSON(http.StatusNotFound, \"cannot find img\")\n\t}\n\n\tfilepath := \"./img/\" + filename\n\n\treturn c.File(filepath)\n}\n\nfunc (a *AccountController) ClearIMGCache(c echo.Context) error {\n\terr := os.RemoveAll(\"img\")\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = os.MkdirAll(\"img\", 0777)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.String(http.StatusOK, \"cleared\")\n}\n\nfunc getContactFromContext(c echo.Context) [5]model.Contact {\n\tvar contacts [5]model.Contact\n\tcontactList := []string{\"facebook\", \"instagram\", \"youtube\", \"email\", \"website\"}\n\n\tfor i := 1; i < 6; i++ {\n\t\tcontacts[i-1] = model.Contact{\n\t\t\tID:   i,\n\t\t\tName: contactList[i-1],\n\t\t\tLink: c.FormValue(contactList[i-1]),\n\t\t}\n\t}\n\n\treturn contacts\n}\n\nfunc getContactFromDB(db *sql.DB, id int) ([5]model.Contact, error) {\n\tvar contacts [5]model.Contact\n\tcontactList := []string{\"facebook\", \"instagram\", \"youtube\", \"email\", \"website\"}\n\n\tqueryString := \"SELECT contact[$1] FROM account WHERE id=$2\"\n\n\tfor i := 1; i < 6; i++ {\n\n\t\tvar link string\n\n\t\trow := db.QueryRow(queryString, i, id)\n\t\terr := row.Scan(&link)\n\t\tif err != nil {\n\t\t\treturn [5]model.Contact{}, err\n\t\t}\n\n\t\tcontacts[i-1] = model.Contact{\n\t\t\tID:   i,\n\t\t\tName: contactList[i-1],\n\t\t\tLink: link,\n\t\t}\n\t}\n\n\treturn contacts, nil\n}\n\nfunc (a *AccountController) GetAccountById(c echo.Context) error {\n\n\taccountID, err := strconv.Atoi(c.Param(\"id\"))\n\tqueryString := \"SELECT id,username,password,coin_amount,first_name,last_name,description FROM account WHERE id = $1\"\n\n\trows, err := a.DB.Query(queryString, accountID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\taccounts := make([]*model.Account, 0)\n\tfor rows.Next() {\n\t\taccount := new(model.Account)\n\n\t\terr := rows.Scan(&account.ID,\n\t\t\t&account.Username,\n\t\t\t&account.Password,\n\t\t\t&account.CoinAmount,\n\t\t\t&account.FirstName,\n\t\t\t&account.LastName,\n\t\t\t&account.Description)\n\n\t\taccount.Contact, err = getContactFromDB(a.DB, account.ID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\taccounts = append(accounts, account)\n\t}\n\n\treturn c.JSON(http.StatusOK, accounts)\n}\n\nfunc (a *AccountController) UpdateAccount(c echo.Context) error {\n\taccount := new(model.UpdateAccount)\n\n\tif err := c.Bind(account); err != nil {\n\t\treturn err\n\t}\n\n\tqueryString := \"UPDATE account SET  first_name = $1 , last_name = $2,description = $3, contact = ARRAY[$4,$5,$6,$7,$8]WHERE id = $9\"\n\t_, err := a.DB.Exec(queryString,\n\t\taccount.FirstName,\n\t\taccount.LastName,\n\t\taccount.Description,\n\t\taccount.Contact[0].Link,\n\t\taccount.Contact[1].Link,\n\t\taccount.Contact[2].Link,\n\t\taccount.Contact[3].Link,\n\t\taccount.Contact[4].Link,\n\t\taccount.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusCreated, \"Account update\")\n}\n\nfunc (a *AccountController) UpdateCoin(c echo.Context) error {\n\n\tcoin := new(model.UpdateCoins)\n\tif err := c.Bind(coin); err != nil {\n\t\treturn err\n\t}\n\n\tqueryString := \"UPDATE account SET coin_amount = coin_amount+$1 WHERE id = $2\"\n\n\t_, err := a.DB.Exec(queryString, coin.Coin, coin.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusCreated, \"Coin update\")\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- controller/account.go	(revision edd45299e7de95ea6df32b7cdcb607d358ca8b83)
+++ controller/account.go	(date 1588574995760)
@@ -48,9 +48,9 @@
 	account.Contact = getContactFromContext(c)
 
 	// insert general info
-	queryString := `INSERT INTO account (username,password,coin_amount,first_name,last_name,contact) 
+	queryString := `INSERT INTO account (username,password,coin_amount,first_name,last_name,contact,email) 
 					VALUES ($1,$2,$3,$4,$5,
-					ARRAY[$6,$7,$8,$9,$10]) RETURNING id`
+					ARRAY[$6,$7,$8,$9,$10]),$11 RETURNING id`
 	err = a.DB.QueryRow(queryString,
 		account.Username,
 		account.Password,
@@ -61,7 +61,8 @@
 		account.Contact[1].Link,
 		account.Contact[2].Link,
 		account.Contact[3].Link,
-		account.Contact[4].Link).Scan(&account.ID)
+		account.Contact[4].Link,
+		account.Contact[3].Link).Scan(&account.ID)
 	if err != nil {
 		return err
 	}
